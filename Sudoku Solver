'''class Solution:
    def solveSudoku(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        def isValid(r,c,val) :

            #row check
            for j in range(9) :
                if board[r][j] == val :
                    return False
            
            #col check
            for i in range(9) :
                if board[i][c] == val :
                    return False

            box_row = (r // 3) * 3
            box_col = (c // 3) * 3
            for i in range(3) :
                for j in range(3) :
                    if board[box_row + i][box_col + j] == val :
                        return False
            return True

        def backTrack() :
            for r in range(9) :
                for c in range(9) :
                    if board[r][c] == '.' :
                        for val in map(str, range(1,10)) :
                            if isValid(r, c, val) :
                                board[r][c] = val
                                if backTrack() :
                                    return True
                                board[r][c] = '.'
                        return False
            return True
        backTrack()'''

class Solution:
    def solveSudoku(self, board: List[List[str]]) -> None:
        rows = [set() for _ in range(9)]
        cols = [set() for _ in range(9)]
        boxes = [set() for _ in range(9)]

        for r in range(9) :
            for c in range(9) :
                val = board[r][c]
                if val != '.' :
                    rows[r].add(val)
                    cols[c].add(val)
                    boxes[(r // 3) * 3 + (c // 3)].add(val)
        def BackTrack(r = 0,c = 0) :
            if r == 9:
                return True
            if c == 9 :
                return BackTrack(r + 1, 0)
            if board[r][c] != '.' :
                return BackTrack(r, c + 1)

            for val in map(str, range(1, 10)):
                box_index = (r // 3) * 3 + (c // 3)
                if val not in rows[r] and val not in cols[c] and val not in boxes[box_index] :
                    board[r][c] = val
                    rows[r].add(val)
                    cols[c].add(val)
                    boxes[box_index].add(val)

                    if BackTrack( r, c + 1) :
                        return True

                    board[r][c] = '.'
                    rows[r].remove(val)
                    cols[c].remove(val)
                    boxes[box_index].remove(val)
            return False
        BackTrack()
            
